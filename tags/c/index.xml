<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C | YoungFar的个人博客——Love&amp;Share</title>
    <link>https://strivefar.github.io/tags/c/</link>
      <atom:link href="https://strivefar.github.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    <description>C</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><copyright>© 2005-2020版权所有[沪ICP备01234567号](http://www.beian.miit.gov.cn)</copyright><lastBuildDate>Wed, 09 Sep 2020 16:26:11 +0800</lastBuildDate>
    <image>
      <url>https://strivefar.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>C</title>
      <link>https://strivefar.github.io/tags/c/</link>
    </image>
    
    <item>
      <title>类型转换</title>
      <link>https://strivefar.github.io/project/post/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 09 Sep 2020 16:26:11 +0800</pubDate>
      <guid>https://strivefar.github.io/project/post/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://strivefar.github.io/img/%E6%B5%AE%E7%82%B9%E6%95%B0/1-1.png&#34; alt=&#34;1-1&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;auto-关键字&#34;&gt;auto 关键字&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;auto即C语言中局部变量的默认属性&lt;/li&gt;
&lt;li&gt;auto表明将被修饰的变量存储于栈上&lt;/li&gt;
&lt;li&gt;编译器默认所有的局部变量都是auto的
示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void f()
{
  int i;      //局部变量默认属性为 auto
  auto int j; //显示声明 auto 属性
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;register-关键字&#34;&gt;register 关键字&lt;/h1&gt;
&lt;p&gt;用于向编译器申请在CPU寄存器上分配空间，以实现高速访问，但是要注意，申请不一定能成功，因为占用CPU寄存器是一件花销很大的事情，ARM算上影子寄存器加起来总共37个，下面我们看一下什么情况下编译器会拒绝该申请。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;    #include &amp;lt;stdio.h&amp;gt;

    register unsigned int a;

    int main()
    {
        register unsigned int i;

        printf(&amp;quot;&amp;amp;i = %p\n&amp;quot;, &amp;amp;i);]

        return 0;
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于全局变量，&lt;code&gt;在程序的整个运行期间内始终存活&lt;/code&gt;，编译器一旦允许，则会长时间的占用CPU寄存器，所以这种情况编译器&lt;code&gt;直接拒绝&lt;/code&gt;了&lt;/p&gt;
&lt;p&gt;不能用 &amp;amp; 符获取register变量地址，地址是相对内存而言的，CPU寄存器尽管可以记录内存地址信息，但CPU寄存器本身没有地址的概念。&lt;/p&gt;
&lt;p&gt;上述两处错误给出提示如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;4-1.c: In function ‘main’:
4-1.c:9:5: error: address of register variable ‘i’ requested
     printf(&amp;quot;&amp;amp;i = %p\n&amp;quot;, &amp;amp;i);]
     ^~~~~~
4-1.c:9:29: error: expected statement before ‘]’ token
     printf(&amp;quot;&amp;amp;i = %p\n&amp;quot;, &amp;amp;i);]
                             ^
4-1.c: At top level:
4-1.c:3:23: error: register name not specified for ‘a’
 register unsigned int a;
                       ^

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所以对于register关键字，现总结如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;register关键字指明将局部变量存储于寄存器中&lt;/li&gt;
&lt;li&gt;register只是请求寄存器变量，但不一定请求成功&lt;/li&gt;
&lt;li&gt;register变量的必须是CPU寄存器可以接受的值&lt;/li&gt;
&lt;li&gt;不能用&amp;amp;运算符获取register变量的地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;static关键字&#34;&gt;static关键字&lt;/h1&gt;
&lt;p&gt;这个在以前的博客中做过详细讨论，&lt;/p&gt;
&lt;p&gt;这里仅给出以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;static关键字指明变量的“静态”属性&lt;/li&gt;
&lt;li&gt;static修饰的局部变量存储在程序静态区&lt;/li&gt;
&lt;li&gt;static关键字同时具有“作用域限定符”的意义&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;static修饰的全局变量作用域只是声明的文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;static修饰的函数作用域只是声明的文件中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>浮点数的秘密</title>
      <link>https://strivefar.github.io/project/post/c_advanced/</link>
      <pubDate>Sun, 06 Sep 2020 16:23:31 +0800</pubDate>
      <guid>https://strivefar.github.io/project/post/c_advanced/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E6%B5%AE%E7%82%B9%E6%95%B0%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F&#34;&gt;1. 浮点数在内存中的存储方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E6%B5%AE%E7%82%B9%E6%95%B0%E5%AD%98%E5%82%A8%E7%A4%BA%E4%BE%8B&#34;&gt;2. 浮点数存储示例&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#21-%E5%AE%9E%E6%95%B0825%E5%9C%A8%E5%86%85%E5%AD%98%E4%B8%AD%E7%9A%84float%E8%A1%A8%E7%A4%BA&#34;&gt;2.1. 实数8.25在内存中的float表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22-%E7%BC%96%E7%A8%8B%E9%AA%8C%E8%AF%81&#34;&gt;2.2. 编程验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E7%B2%BE%E5%BA%A6%E9%97%AE%E9%A2%98&#34;&gt;3. 精度问题&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#31-%E7%BC%96%E7%A8%8B%E9%AA%8C%E8%AF%81&#34;&gt;3.1. 编程验证&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-浮点数在内存中的存储方式&#34;&gt;1. 浮点数在内存中的存储方式&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;浮点数在内存中由以下三部分组成：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符号位&lt;/li&gt;
&lt;li&gt;指数&lt;/li&gt;
&lt;li&gt;尾数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;无论是float类型还是double类型的数据，在计算机内部的表示方法是相同的，但由于所占的存储空间不同，其分别能够表示的数值范围和精度不同。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;符号位&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;指数&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;尾数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;float&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1位（第31位）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;8位（第23~30位）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;23位（第0~22位）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;double&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;1位（第63位）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;11位（第52~62位）&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;52位（第0~51位）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;2-浮点数存储示例&#34;&gt;2. 浮点数存储示例&lt;/h1&gt;
&lt;p&gt;浮点数的转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;将浮点数转换成二进制&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;用科学计数法表示二进制浮点数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;计算指数偏移后的值&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意∶&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;计算&lt;code&gt;指数&lt;/code&gt;时需要加上偏移量，而&lt;code&gt;偏移量的值与类型有关&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于指数6，偏移后的值如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;float : 127 + 6 = 123
double: 1023 + 6 = 1030
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;小数用二进制如何表示&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先，给出一个任意实数，整数部分用普通的二进制便可以表示，这里只说小数部分如何表示&lt;/p&gt;
&lt;p&gt;例如0.6&lt;/p&gt;
&lt;p&gt;文字描述该过程如下：将该数字乘以2，取出整数部分作为二进制表示的第1位；然后再将小数部分乘以2，将得到的整数部分作为二进制表示的第2位；以此类推，知道小数部分为0。&lt;/p&gt;
&lt;p&gt;特殊情况： 小数部分出现循环，无法停止，则用有限的二进制位无法准确表示一个小数，这也是在编程语言中表示小数会出现误差的原因&lt;/p&gt;
&lt;p&gt;下面我们具体计算一下0.6的小数表示过程&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0.6 * 2 = 1.2 ——————- 1
0.2 * 2 = 0.4 ——————- 0
0.4 * 2 = 0.8 ——————- 0
0.8 * 2 = 1.6 ——————- 1
0.6 * 2 = 1.2 ——————- 1
…………
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以发现在该计算中已经出现了循环，0.6用二进制表示为 1001 1001 1001 1001 ……
如果是10.6，那个10.6的完整二进制表示为 1010.100110011001……&lt;/p&gt;
&lt;p&gt;参考：https://blog.csdn.net/xingtanzjr/article/details/50803832&lt;/p&gt;
&lt;h2 id=&#34;21-实数825在内存中的float表示&#34;&gt;2.1. 实数8.25在内存中的float表示&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://strivefar.github.io/img/%E6%B5%AE%E7%82%B9%E6%95%B0/1-1.png&#34; alt=&#34;1-1&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;22-编程验证&#34;&gt;2.2. 编程验证&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
/**功能：输出内存片段中的每一位的值
 * 参数：
 *      p :指向占1、2、4、8字节内存的变量的指针
 *      size ：变量在内存中所占的字节数
 */
void put_bin(void *p, char size)
{
    char i;
    switch (size)
    {
    case 1:
        for (i = sizeof(unsigned char) * 8; i &amp;gt; 0; i--)
        {
            printf(&amp;quot;%d&amp;quot;, !!(*((unsigned char *)p) &amp;amp; (1 &amp;lt;&amp;lt; (i - 1))));
            if (0 == (i - 1) % 4)
                printf(&amp;quot; &amp;quot;);
        }
        printf(&amp;quot;\n&amp;quot;);
        break;
    case 2:
        for (i = sizeof(unsigned short) * 8; i &amp;gt; 0; i--)
        {
            printf(&amp;quot;%d&amp;quot;, !!(*((unsigned short *)p) &amp;amp; (1 &amp;lt;&amp;lt; (i - 1))));
            if (0 == (i - 1) % 4)
                printf(&amp;quot; &amp;quot;);
        }
        printf(&amp;quot;\n&amp;quot;);
        break;
    case 4:
        for (i = sizeof(unsigned int) * 8; i &amp;gt; 0; i--)
        {
            printf(&amp;quot;%d&amp;quot;, !!(*((unsigned int *)p) &amp;amp; (1 &amp;lt;&amp;lt; (i - 1))));
            if (0 == (i - 1) % 4)
                printf(&amp;quot; &amp;quot;);
        }
        printf(&amp;quot;\n&amp;quot;);
        break;
    case 8:
        for (i = sizeof(long long) * 8; i &amp;gt; 0; i--)
        {
            printf(&amp;quot;%d&amp;quot;, !!(*((unsigned long long int *)p) &amp;amp; (1 &amp;lt;&amp;lt; (i - 1))));
            if (0 == (i - 1) % 4)
                printf(&amp;quot; &amp;quot;);
        }
        printf(&amp;quot;\n&amp;quot;);
        break;
    default:
        break;
    }
}

int main()
{
    float f = 8.25;
    unsigned int *p = (unsigned int *)&amp;amp;f; //占用内存大小相同
    put_bin(p, sizeof(unsigned int));     //输出unsigned int内存片段中的每一位的值
    printf(&amp;quot;0x%08x\n&amp;quot;, *p);               //16进制打印
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gcc -o test 3-1.c -m32
./test
0100 0001 0000 0100 0000 0000 0000 0000
0x41040000
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;3-精度问题&#34;&gt;3. 精度问题&lt;/h1&gt;
&lt;p&gt;为了引出对这一问题的思考，我们先看一下int与float类型的范围
&lt;img src=&#34;https://strivefar.github.io/img/%E6%B5%AE%E7%82%B9%E6%95%B0/1-3.png&#34; alt=&#34;1-3&#34;&gt;
&lt;strong&gt;那么问题来了：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;int 和 float 都占4字节的内存，为什么float却比int的范围大呢？&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;目前我们知道&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;int和float都占4个字节的内存，因此float能表示的具体数字的个数与int相同&lt;/li&gt;
&lt;li&gt;float类型所能表示的数字的范围却比int的范围大&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;float可表示的数字之间不是连续的，&lt;code&gt;存在间隙&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;float只是一种&lt;code&gt;近似的表示法&lt;/code&gt;，不能作为精确数使用&lt;/li&gt;
&lt;li&gt;由于内存表示法相对复杂，float的运算速度比int&lt;code&gt;慢&lt;/code&gt;得多&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;31-编程验证&#34;&gt;3.1. 编程验证&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

int main()
{
    float f = 3.14159f;
    float fa = 123456789;

    printf(&amp;quot;%0.10f\n&amp;quot;, f);
    printf(&amp;quot;%0.10f\n&amp;quot;, fa);
    
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;3.1415901184
123456792.0000000000
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注：本文为学习唐老师C进阶课程的笔记，如有问题，欢迎各位批评指正。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>细究 unsigned 与 signed</title>
      <link>https://strivefar.github.io/project/post/unsigned%E4%B8%8Esigned/</link>
      <pubDate>Tue, 01 Sep 2020 11:18:51 +0800</pubDate>
      <guid>https://strivefar.github.io/project/post/unsigned%E4%B8%8Esigned/</guid>
      <description>&lt;p&gt;在计算机中，数值类型分为整数型或实数型，其中整型又分为无符类型或有符类型，而实型则只有符类型。 字符类型也分为有符和无符类型。在程序中，用户可以自己定义是否需要一个非负整数；&lt;/p&gt;
&lt;p&gt;一、无符号数和有符号数的表示方式
以一个字节(char类型)为例：若想要表示正负号，一般需要一个位来标记，如取最高代表正负号，则有符号和无符号的数值最大值对比如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;   有符号：0111 1111 = 2^6+2^5+2^4+2^3+2^2+2^1+2^0     = 127; ==&amp;gt; 范围是 -128 ~ 127
  
   无符号：1111 1111 = 2^7+2^6+2^5+2^4+2^3+2^2+2^1+2^0 = 255；==&amp;gt; 范围是   0  ~ 255
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由上可看出：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同样一个字节大小，有符号和无符号表示的范围不同，但个数相同均为256个；&lt;/li&gt;
&lt;li&gt;单纯这样存储是存在问题:&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;针对有符号数，0在内存中存在两种方式即＋0和－0；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;针对负数的大小，-1(1000 0001)和-2(1000 0010)单纯的从二进制存储来比较，应该是-2(1000 0010)&amp;gt; -1(1000 0001)这与实际逻辑不吻合；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;二进制补码避免了这个问题，这也是当今最常用的系统存储方式：即高位段0代表正数，1代表负数，表示正数为原码，而表示负数的方式采用：补码 = 反码+1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;参考：
&lt;a href=&#34;https://my.oschina.net/u/4279662/blog/3283931&#34;&gt;有符号数和无符号数&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下为OneNote笔记截图，由于时间原因，以后再做整理
&lt;img src=&#34;https://strivefar.github.io/img/unsigned%E4%B8%8Esigned/1-1.jpg&#34; alt=&#34;1-1&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于取址符&#39;&amp;&#39;的讨论</title>
      <link>https://strivefar.github.io/project/post/%E5%85%B3%E4%BA%8E%E5%8F%96%E5%9D%80%E7%AC%A6%E7%9A%84%E8%AE%A8%E8%AE%BA/</link>
      <pubDate>Thu, 20 Aug 2020 16:02:29 +0800</pubDate>
      <guid>https://strivefar.github.io/project/post/%E5%85%B3%E4%BA%8E%E5%8F%96%E5%9D%80%E7%AC%A6%E7%9A%84%E8%AE%A8%E8%AE%BA/</guid>
      <description>&lt;h1 id=&#34;-在数组中的应用&#34;&gt;&amp;amp; 在数组中的应用&lt;/h1&gt;
&lt;p&gt;以下面这个数组为例，我们先来明确一些概念&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int a[10];
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;a与a0的关系&#34;&gt;&lt;strong&gt;a与&amp;amp;a[0]的关系&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;数组名a是数组0号元素的地址,也就是存在以下等价关系&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;a 等价于 &amp;amp;a[0]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;amp;a[0] 表示对一个int型变量取地址，a[0]是一个int变量， 一个int变量的地址类型是 int* ,所以 &amp;amp;a[0] 为 int* 类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;于是有 a 等价于 &amp;amp;a[0]，且二者均为 int* 类型&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a与a的关系&#34;&gt;&lt;strong&gt;a与&amp;amp;a的关系&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&amp;amp;a 和 a 在数值上相同，但意义不同！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;amp;a 代表数组地址，类型为 int(*)[10]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;a 代表 数组0号元素的地址，类型为 int*
&lt;img src=&#34;https://strivefar.github.io/img/%E5%8F%96%E5%9D%80%E7%AC%A6%E7%9A%84%E8%AE%A8%E8%AE%BA/1.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;于是指向数组的指针可以定义为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int(*p_arr)[10] = &amp;amp;a;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指向数组成员的指针可以定义为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int *p = a; 或 int *p = &amp;amp;a[0];
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ai-中的隐式转换&#34;&gt;a+i 中的隐式转换&lt;/h2&gt;
&lt;p&gt;我们经常在程序中看到类似这样的用法&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;printf(&amp;quot;%d\n&amp;quot;, *(a+i));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;a 为int&lt;em&gt;类型，i为 int类型，a+i的结果是int&lt;/em&gt;类型，加几就越过几个sizeof(int)，所以&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a+i 或 &amp;amp;a[0]+i&lt;/code&gt; = &lt;code&gt;被取址变量本身的地址&lt;/code&gt;  +  &lt;code&gt;i * sizeof(被取址的变量的类型)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;这个关系很重要，有的时候我们为使代码简洁，会直接对变量取址，进行上述操作后再解引用，而不是定义一个指针指来指去，下边的代码综合和柔性数组会遇到这种情况。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;示例代码1&#34;&gt;示例代码1&lt;/h2&gt;
&lt;p&gt;以下示例代码包含了上边讨论的诸多情况，有助于对上述讨论内容的理解&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

int a[10] = {0};
int main()
{
    int i;
    for (i = 0; i &amp;lt; 10; i++)
    {
        a[i] = i + 1;
    }

    int *p = a;
    int *p1 = &amp;amp;a[0];
    int *p2 = &amp;amp;a[1];
    int(*p_half)[5] = (int(*)[5]) &amp;amp; a;
    int(*p_2)[2] = (int(*)[2]) &amp;amp; a[1];

    printf(&amp;quot; p     = %p\n&amp;quot;, a);
    printf(&amp;quot; p1    = %p\n&amp;quot;, p1);
    printf(&amp;quot; p_half = %p\n&amp;quot;, p_half);

    printf(&amp;quot; p2    = %p\n&amp;quot;, p2);
    printf(&amp;quot; p_2   = %p\n&amp;quot;, p_2);

    printf(&amp;quot;%d, %d, %d\n&amp;quot;, p[0], p1[0], *((int *)p_half));

    printf(&amp;quot;%d , %d\n&amp;quot;, a[5], *((int *)(p_half + 1)));

    printf(&amp;quot;%d , %d\n&amp;quot;, a[3], *((int *)(p_2 + 1)));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在Linux执行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc - o test test.c
./test
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出结果如下：
&lt;img src=&#34;https://strivefar.github.io/img/%E5%8F%96%E5%9D%80%E7%AC%A6%E7%9A%84%E8%AE%A8%E8%AE%BA/2.png&#34; alt=&#34;2&#34;&gt;
&lt;strong&gt;注意&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;代码中的p_2 的类型为 int(*)[2]&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;amp;a[1]为int*类型，此处需要强制类型转换
&lt;img src=&#34;https://strivefar.github.io/img/%E5%8F%96%E5%9D%80%E7%AC%A6%E7%9A%84%E8%AE%A8%E8%AE%BA/3.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;在结构体中的应用&#34;&gt;&amp;amp;在结构体中的应用&lt;/h1&gt;
&lt;h2 id=&#34;结构和数组的联系与区别&#34;&gt;结构和数组的联系与区别&lt;/h2&gt;
&lt;p&gt;数组和结构相似的地方是都不再是单一的原子类型，而是一个集合。区别在于数组是相同类型元素（元素可以是原子类型的整型、浮点型、字符型或者结构体、数组等）的集合，而结构是不同类型元素（元素可以是原子类型的整型、浮点型、字符型或者结构体、数组等）的集合。所以结构无所不包，当然结构中也可以定义相同类型的元素，而数组则不然，从这个角度，结构体的普世意义更为广泛，但是毫无疑问，如果结构定义为成员类型是相同的，那么相比定义数组要麻烦的多。&lt;/p&gt;
&lt;p&gt;(来自 &lt;a href=&#34;https://blog.csdn.net/zhanshen112/article/details/80429861&#34;&gt;https://blog.csdn.net/zhanshen112/article/details/80429861&lt;/a&gt; )&lt;/p&gt;
&lt;p&gt;为更为彻底的体会&amp;amp;的妙用，我们的示例代码将涉及柔性数组(也叫零长度数组)&lt;/p&gt;
&lt;h2 id=&#34;示例代码2&#34;&gt;示例代码2&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;

struct test
{
        int count;
        //reverse is array name;the array is no item;
        //the array address follow test struct
        int reverse[0];
};

int main()
{
        int i;
        struct test *ptest = (struct test *)malloc(sizeof(struct test) + sizeof(int) * 10);
        for (i = 0; i &amp;lt; 10; i++)
        {
                ptest-&amp;gt;reverse[i] = i + 1;
        }
        for (i = 0; i &amp;lt; 10; i++)
        {
                printf(&amp;quot;reverse[%d]=%d \n&amp;quot;, i, ptest-&amp;gt;reverse[i]);
        }
        printf(&amp;quot;\n\n&amp;quot;);

        printf(&amp;quot;sizeof(struct test) =%ld\n&amp;quot;, sizeof(struct test));

        /* a+i 或 &amp;amp;a[0]+i = 被取址变量本身的地址  +  i * sizeof(被取址的变量的类型)*/
        int a = *(&amp;amp;ptest-&amp;gt;count + 1);
        printf(&amp;quot;&amp;amp;ptest-&amp;gt;count    = %p\n&amp;quot;, &amp;amp;ptest-&amp;gt;count);
        printf(&amp;quot;&amp;amp;ptest-&amp;gt;count +1 = %p\n&amp;quot;, (&amp;amp;ptest-&amp;gt;count + 1));
        printf(&amp;quot;a=%d\n\n\n&amp;quot;, a);

        int(*p)[5] = (int(*)[5])(&amp;amp;ptest-&amp;gt;reverse[0]);

        // int(*p)[5] = (&amp;amp;ptest-&amp;gt;reverse[0]);
        /*
        &amp;amp;ptest-&amp;gt;reverse[0]&amp;lt;=&amp;gt;数组0号元素的地址，类型为int* ，所以此处编译器会给出警告
        */

        /* 无论&amp;amp;取哪个成员的地址，只要加上正确的偏移，总能正确访问到目标 */
        printf(&amp;quot;%d ,%d\n&amp;quot;, *(&amp;amp;ptest-&amp;gt;count + 1), *((int *)p));
        printf(&amp;quot;%d ,%d\n&amp;quot;, *(&amp;amp;ptest-&amp;gt;count + 1 + 5), *((int *)(p + 1)));
        printf(&amp;quot;%d ,%d\n&amp;quot;, *(&amp;amp;ptest-&amp;gt;reverse[0] + 5), *((int *)(p + 1)));
        printf(&amp;quot;%d ,%d\n&amp;quot;, *(&amp;amp;ptest-&amp;gt;reverse[1] + 4), *((int *)(p + 1)));

        free(ptest);
        return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcc - o test_1 test1.c
./test_1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://strivefar.github.io/img/%E5%8F%96%E5%9D%80%E7%AC%A6%E7%9A%84%E8%AE%A8%E8%AE%BA/4.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Static的作用</title>
      <link>https://strivefar.github.io/project/post/static%E7%9A%84%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Sun, 12 Jul 2020 13:05:52 +0800</pubDate>
      <guid>https://strivefar.github.io/project/post/static%E7%9A%84%E4%BD%9C%E7%94%A8/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%89%8D%E8%A8%80&#34;&gt;1. 前言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E5%85%B3%E9%94%AE%E8%AF%8D%E8%A7%A3%E9%87%8A&#34;&gt;2. 关键词解释：&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#21-%E5%8F%98%E9%87%8F%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E5%BC%8F&#34;&gt;2.1. 变量的存储方式&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#211-%E9%9D%99%E6%80%81%E5%AD%98%E5%82%A8%E5%8F%98%E9%87%8F&#34;&gt;2.1.1. 静态存储变量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#212-%E5%8A%A8%E6%80%81%E5%AD%98%E5%82%A8%E5%8F%98%E9%87%8F&#34;&gt;2.1.2. 动态存储变量&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22-%E7%94%9F%E5%AD%98%E6%9C%9F%E7%9A%84%E5%8C%BA%E5%88%AB&#34;&gt;2.2. 生存期的区别&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-static-%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E4%B8%8E%E6%99%AE%E9%80%9A%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E7%9A%84%E5%8C%BA%E5%88%AB-&#34;&gt;3. static 全局变量与普通全局变量的区别 ？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-static%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E5%92%8C%E6%99%AE%E9%80%9A%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB-&#34;&gt;4. static局部变量和普通局部变量有什么区别 ？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-static%E5%87%BD%E6%95%B0%E4%B8%8E%E6%99%AE%E9%80%9A%E5%87%BD%E6%95%B0%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB&#34;&gt;5. static函数与普通函数有什么区别？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-%E5%B7%A7%E7%94%A8static%E9%BB%98%E8%AE%A4%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%BA0&#34;&gt;6. 巧用static,默认初始化为0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7-%E6%80%BB%E7%BB%93static%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E4%BD%9C%E7%94%A8&#34;&gt;7. 总结：static关键字的作用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8-%E5%8F%82%E8%80%83%E6%9D%A5%E6%BA%90&#34;&gt;8. 参考来源：&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-前言&#34;&gt;1. 前言&lt;/h1&gt;
&lt;p&gt;Linux内核源码中使用的大量的static关键字来修饰变量和函数，有效的防止了不同文件间的相同变量或函数名引起的冲突，关于static的作用，现解释如下，如有问题，欢迎批评指正。&lt;/p&gt;
&lt;h1 id=&#34;2-关键词解释&#34;&gt;2. 关键词解释：&lt;/h1&gt;
&lt;h2 id=&#34;21-变量的存储方式&#34;&gt;2.1. 变量的存储方式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可分为：“静态存储”和“动态存储”两种。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;211-静态存储变量&#34;&gt;2.1.1. 静态存储变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通常是在变量定义时就分定存储单元并一直保持不变，直至整个程序结束，即在程序运行期间分配固定的存储空间。
全局变量即属于此类存储方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;212-动态存储变量&#34;&gt;2.1.2. 动态存储变量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在程序执行过程中，使用它时才分配存储单元，使用完毕立即释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;典型的例子是函数的形式参数，在函数定义时并不给行参分配存储单元，只是在函数被调用时，才予以分配，调用函数完毕立即释放。
如果一个函数被多次调用时，则反复地分配、释放形参变量的存储单元。&lt;/p&gt;
&lt;h2 id=&#34;22-生存期的区别&#34;&gt;2.2. 生存期的区别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;静态存储变量是&lt;strong&gt;一直存在&lt;/strong&gt;的，而动态存储变量则&lt;strong&gt;时而存在时而消失&lt;/strong&gt;。通常把由于变量存储方式不同而产生的特性称为变量的&lt;strong&gt;生存期&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-static-全局变量与普通全局变量的区别-&#34;&gt;3. static 全局变量与普通全局变量的区别 ？&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;普通全局变量加上static修饰后就变成了static全局变量&lt;/li&gt;
&lt;li&gt;二者都是存储在静态变量区，即以静态存储方式进行存储，&lt;/li&gt;
&lt;li&gt;区别：全局变量加上static之后就被限制了可见范围&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;未加static之前，全局变量在所有的源程序都可见，只要加上extern即可使用其他文件中定义的全局变量；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;加上static之后，变为了静态全局变量，静态全局变量的作用域局限于一个源文件内，只能为该源文件内的函数公用，&lt;strong&gt;因此可以避免在其它源文件中引起错误&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-static局部变量和普通局部变量有什么区别-&#34;&gt;4. static局部变量和普通局部变量有什么区别 ？&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;保持变量内容的持久，存储在静态数据区的变量会在程序编译时分配固定的存储空间，程序刚开始运行时就完成初始化，也是唯一的一次初始化。
举例如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;

int fun(void)
{
  /*static局部变量只被初始化一次，下一次使用时在上一次结果值的基础上进行改变*/
    static int count = 10;    
    return count--;
}

int count = 1;

int main(void)
{    
    printf(&amp;quot;global\t\tlocal static\n&amp;quot;);
    for(; count &amp;lt;= 10; ++count)
        printf(&amp;quot;%d\t\t%d\n&amp;quot;, count, fun());    
    
    return 0;
}


程序的运行结果是：

global          local static

1               10

2               9

3               8

4               7

5               6

6               5

7               4

8               3

9               2

10              1
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;5-static函数与普通函数有什么区别&#34;&gt;5. static函数与普通函数有什么区别？&lt;/h1&gt;
&lt;p&gt;这有些类似于static 全局变量与普通全局变量的区别，同样的，static函数仅对定义该函数的当前文件可见，无法像普通函数一样加上extern声明就能在其他文件中使用。&lt;/p&gt;
&lt;p&gt;也就是说static修饰后成为了内部函数，应该在当前源文件中说明和定义。对于可在当前源文件以外使用的函数，应该在一个头文件中说明，要使用这些函数的源文件要包含这个头文件.&lt;/p&gt;
&lt;h1 id=&#34;6-巧用static默认初始化为0&#34;&gt;6. 巧用static,默认初始化为0&lt;/h1&gt;
&lt;p&gt;static的第三个作用是默认初始化为0。其实全局变量也具备这一属性，因为全局变量也存储在静态数据区。在静态数据区，内存中所有的字节默认值都是0x00，某些时候这一特点可以减少程序员的工作量。比如初始化一个稀疏矩阵，我们可以一个一个地把所有元素都置0，然后把不是0的几个元素赋值。如果定义成静态的，就省去了一开始置0的操作。再比如要把一个字符数组当字符串来用，但又觉得每次在字符数组末尾加&amp;rsquo;\ 0&#39;太麻烦。如果把字符串定义成静态的，就省去了这个麻烦，因为那里本来就是&amp;rsquo;\0&amp;rsquo;。不妨做个小实验验证一下。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;stdio.h&amp;gt;
int a;

int main(void)
{
    int i;
    static char str[10];

    printf(&amp;quot;integer: %d;  string: (begin)%s(end)&amp;quot;, a, str);

    return 0;
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;integer: 0; string: (begin)(end)
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;7-总结static关键字的作用&#34;&gt;7. 总结：static关键字的作用&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1.隐藏（限制作用域）&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2.保持变量内容的持久&lt;/strong&gt;（静态局部变量）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3.默认初始化为0&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;8-参考来源&#34;&gt;8. 参考来源：&lt;/h1&gt;
&lt;p&gt;特此感谢：
&lt;a href=&#34;https://blog.csdn.net/tr_ainiyangyang/article/details/80965574&#34;&gt;https://blog.csdn.net/tr_ainiyangyang/article/details/80965574&lt;/a&gt;
&lt;a href=&#34;https://blog.csdn.net/qq_37858386/article/details/79064900&#34;&gt;https://blog.csdn.net/qq_37858386/article/details/79064900&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux | YoungFar的个人博客——Love&amp;Share</title>
    <link>https://strivefar.github.io/categories/linux/</link>
      <atom:link href="https://strivefar.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <description>linux</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><lastBuildDate>Tue, 22 Dec 2020 11:00:45 +0800</lastBuildDate>
    <image>
      <url>https://strivefar.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>linux</title>
      <link>https://strivefar.github.io/categories/linux/</link>
    </image>
    
    <item>
      <title>Linux字符设备驱动——入口函数完全解析</title>
      <link>https://strivefar.github.io/project/post/linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Tue, 22 Dec 2020 11:00:45 +0800</pubDate>
      <guid>https://strivefar.github.io/project/post/linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-inode%E7%B4%A2%E5%BC%95&#34;&gt;1. inode——索引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-struct-file&#34;&gt;2. struct file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-cdev&#34;&gt;3. cdev&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#31-%E5%9C%A8linux%E5%86%85%E6%A0%B8%E4%B8%AD&#34;&gt;3.1. 在Linux内核中：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#32-%E5%9C%A8linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E4%B8%AD&#34;&gt;3.2. 在Linux字符设备驱动中:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#33-%E7%94%A8%E6%88%B7%E7%A9%BA%E9%97%B4%E8%AE%BF%E9%97%AE%E8%AF%A5%E8%AE%BE%E5%A4%87%E7%9A%84%E7%A8%8B%E5%BA%8F&#34;&gt;3.3. 用户空间访问该设备的程序:&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#34-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90&#34;&gt;3.4. 源码解析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E8%AE%BE%E5%A4%87%E5%8F%B7%E5%88%86%E9%85%8D&#34;&gt;4. 设备号分配&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#41-%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E5%88%86%E9%85%8D%E8%AE%BE%E5%A4%87%E5%8F%B7&#34;&gt;4.1. 两种方法分配设备号&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#411-%E5%8A%A8%E6%80%81%E5%88%86%E9%85%8D&#34;&gt;4.1.1. 动态分配&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#412-%E9%9D%99%E6%80%81%E7%94%B3%E8%AF%B7&#34;&gt;4.1.2. 静态申请&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#42-%E8%87%AA%E5%8A%A8%E5%88%86%E9%85%8D%E8%AE%BE%E5%A4%87%E5%8F%B7%E6%B3%A8%E5%86%8Ccdev&#34;&gt;4.2. 自动分配设备号+注册cdev&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-class-%E4%BB%8B%E7%BB%8D&#34;&gt;5. class 介绍&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAclass&#34;&gt;创建一个class&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#class_create%E5%AE%8F&#34;&gt;class_create宏&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%9C%A8class%E4%B8%8B%E6%B7%BB%E5%8A%A0kobject%E5%AF%B9%E8%B1%A1&#34;&gt;在class下添加kobject对象&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#device_create%E5%87%BD%E6%95%B0&#34;&gt;device_create()函数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B&#34;&gt;6. 字符设备驱动入口函数初始化流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7-open%E5%87%BD%E6%95%B0%E5%A6%82%E4%BD%95%E6%9F%A5%E6%89%BEfile_operation%E7%9A%84%E6%8E%A5%E5%8F%A3&#34;&gt;7. open函数如何查找file_operation的接口&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%8F%82%E8%80%83%E6%9D%A5%E6%BA%90&#34;&gt;参考来源&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-inode索引&#34;&gt;1. inode——索引&lt;/h1&gt;
&lt;p&gt;参考：http://blog.itpub.net/28291944/viewspace-2143703/&lt;/p&gt;
&lt;p&gt;inode 译成中文就是索引节点。每个存储设备或存储设备的分区（存储设备是硬盘、软盘、U盘 &amp;hellip; &amp;hellip; ）被格式化为文件系统后，应该有两部份，一部份是inode，另一部份是Block，Block是用来存储数据用的。而inode呢，就是用来存储这些数据的信息，这些信息包括文件大小、属主、归属的用户组、读写权限等。inode为每个文件进行信息索引，所以就有了inode的数值。操作系统根据指令，能通过inode值最快的找到相对应的文件。
做个比喻，比如一本书，存储设备或分区就相当于这本书，Block相当于书中的每一页，inode 就相当于这本书前面的目录，一本书有很多的内容，如果想查找某部份的内容，我们可以先查目录，通过目录能最快的找到我们想要看的内容。&lt;/p&gt;
&lt;p&gt;当我们用ls 查看某个目录或文件时，如果加上-i 参数，就可以看到inode节点了；比如ls -li lsfile.sh ，最前面的数值就是inode信息&lt;/p&gt;
&lt;h1 id=&#34;2-struct-file&#34;&gt;2. struct file&lt;/h1&gt;
&lt;p&gt;struct file结构体定义在include/linux/fs.h中定义。文件结构体代表一个打开的文件，系统中的每个打开的文件在内核空间都有一个关联的 struct file。它由内核在打开文件时创建，并传递给在文件上进行操作的任何函数。在文件的所有实例都关闭后，内核释放这个数据结构。在内核创建和驱动源码中，struct file的指针通常被命名为file或filp。&lt;/p&gt;
&lt;h1 id=&#34;3-cdev&#34;&gt;3. cdev&lt;/h1&gt;
&lt;p&gt;此部分转自&lt;a href=&#34;https://blog.csdn.net/zqixiao_09/article/details/50839042&#34;&gt;Linux 字符设备驱动结构（一）—— cdev 结构体、设备号相关知识解析&lt;/a&gt;，强烈建议大家看一下，这位博主写的非常好！&lt;/p&gt;
&lt;h2 id=&#34;31-在linux内核中&#34;&gt;3.1. 在Linux内核中：&lt;/h2&gt;
&lt;p&gt;a &amp;ndash; 使用cdev结构体来描述字符设备;&lt;/p&gt;
&lt;p&gt;b &amp;ndash; 通过其成员dev_t来定义设备号（分为主、次设备号）以确定字符设备的唯一性;&lt;/p&gt;
&lt;p&gt;c &amp;ndash; 通过其成员file_operations来定义字符设备驱动提供给VFS的接口函数，如常见的open()、read()、write()等;&lt;/p&gt;
&lt;h2 id=&#34;32-在linux字符设备驱动中&#34;&gt;3.2. 在Linux字符设备驱动中:&lt;/h2&gt;
&lt;p&gt;a &amp;ndash; 模块加载函数通过 register_chrdev_region( ) 或 alloc_chrdev_region( )来静态或者动态获取设备号;&lt;/p&gt;
&lt;p&gt;b &amp;ndash; 通过 cdev_init( ) 建立cdev与 file_operations之间的连接，通过 cdev_add( ) 向系统添加一个cdev以完成注册;&lt;/p&gt;
&lt;p&gt;c &amp;ndash; 模块卸载函数通过cdev_del( )来注销cdev，通过 unregister_chrdev_region( )来释放设备号;&lt;/p&gt;
&lt;h2 id=&#34;33-用户空间访问该设备的程序&#34;&gt;3.3. 用户空间访问该设备的程序:&lt;/h2&gt;
&lt;p&gt;a &amp;ndash; 通过Linux系统调用，如open( )、read( )、write( )，来“调用”file_operations来定义字符设备驱动提供给VFS的接口函数;&lt;/p&gt;
&lt;h2 id=&#34;34-源码解析&#34;&gt;3.4. 源码解析&lt;/h2&gt;
&lt;p&gt;这里简单说一下cdev_add()将新的struct probe 添加到散列表中，其中的void* data则和cdev绑定，方便后续open系统调用使用。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int cdev_add(struct cdev *p, dev_t dev, unsigned count)
{
	int error;

	p-&amp;gt;dev = dev;
	p-&amp;gt;count = count;

	error = kobj_map(cdev_map, dev, count, NULL,
			 exact_match, exact_lock, p);
	if (error)
		return error;

	kobject_get(p-&amp;gt;kobj.parent);

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重点来看一下kobj_map函数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://strivefar.github.io/img/Linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/probe.png&#34; alt=&#34;probe&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;4-设备号分配&#34;&gt;4. 设备号分配&lt;/h1&gt;
&lt;h2 id=&#34;41-两种方法分配设备号&#34;&gt;4.1. 两种方法分配设备号&lt;/h2&gt;
&lt;p&gt;register_chrdev_region和alloc_chrdev_region是新版本推荐使用的主设备号注册函数，优点是注册的次设备号的数量可以自己决定，缺点就是需要自己完成cdev的init 和 add。二者的对比如下：&lt;/p&gt;
&lt;h3 id=&#34;411-动态分配&#34;&gt;4.1.1. 动态分配&lt;/h3&gt;
&lt;p&gt;alloc_chrdev_region：内核自动分配设备号，用于动态注册（因为内部调用__register_chrdev_region()时传入的主设备号为0），优先从254~234范围内进行主设备号的分配，如果不在此范围内，内核会给出警告&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int alloc_chrdev_region(dev_t *dev, unsigned baseminor, unsigned count,
			const char *name)
{
	struct char_device_struct *cd;
	cd = __register_chrdev_region(0, baseminor, count, name);
	if (IS_ERR(cd))
		return PTR_ERR(cd);
	*dev = MKDEV(cd-&amp;gt;major, cd-&amp;gt;baseminor);
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;412-静态申请&#34;&gt;4.1.2. 静态申请&lt;/h3&gt;
&lt;p&gt;register_chrdev_region：用于静态注册，用于设备号已知的情况下进行静态注册，如果传入的主设备号为0，则也相当于动态注册，原因就在于无论是register_chrdev_region还是alloc_chrdev_region ，其内部都调用了__register_chrdev_region()函数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;int register_chrdev_region(dev_t from, unsigned count, const char *name)
{
	struct char_device_struct *cd;
	dev_t to = from + count;
	dev_t n, next;

	for (n = from; n &amp;lt; to; n = next) {
		next = MKDEV(MAJOR(n)+1, 0);
		if (next &amp;gt; to)
			next = to;
		cd = __register_chrdev_region(MAJOR(n), MINOR(n),
			       next - n, name);
		if (IS_ERR(cd))
			goto fail;
	}
	return 0;
fail:
	to = n;
	for (n = from; n &amp;lt; to; n = next) {
		next = MKDEV(MAJOR(n)+1, 0);
		kfree(__unregister_chrdev_region(MAJOR(n), MINOR(n), next - n));
	}
	return PTR_ERR(cd);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;__register_chrdev_region(): Register a single major with a specified minor range.&lt;/p&gt;
&lt;p&gt;注册单个主设备号及旗下指定范围的次设备号。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if (major == 0) {
		for (i = ARRAY_SIZE(chrdevs)-1; i &amp;gt; 0; i--) {
			if (chrdevs[i] == NULL)
				break;
		}

		if (i &amp;lt; CHRDEV_MAJOR_DYN_END)
			pr_warn(&amp;quot;CHRDEV \&amp;quot;%s\&amp;quot; major number %d goes below the dynamic allocation range\n&amp;quot;,
				name, i);

		if (i == 0) {
			ret = -EBUSY;
			goto out;
		}
		major = i;
	}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;__register_chrdev_region()调用图解，填充chrdevs散列表，记录主次设备号。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://strivefar.github.io/img/Linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/chrdevs%5B%5D.png&#34; alt=&#34;chrdevs[]&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;42-自动分配设备号注册cdev&#34;&gt;4.2. 自动分配设备号+注册cdev&lt;/h2&gt;
&lt;p&gt;register_chrdev是老版本的内核常用的，缺点就是一次申请255个次设备号，占用内存多，容易造成资源浪费。之所以一次注册255个次设备号是因为其内部调用__register_chrdev_region()函数时传入了如下参数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static inline int register_chrdev(unsigned int major, const char *name,
				  const struct file_operations *fops)
{
	return __register_chrdev(major, 0, 256, name, fops);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;优点就是这个函数不仅帮我们完成了设备号的分配，内部还调用了cdev_add()和cdev_init()函数自动的完成了struct probe *probes[255]散列表的初始化和注册，probes用来管理cdev，虽然做了很多无用功，但这样让代码看起来更简洁。&lt;/p&gt;
&lt;p&gt;参数及返回值：&lt;/p&gt;
&lt;p&gt;传入 0 则自动分配主设备号，否则使用自定义主设备号+申请255个次设备号&lt;/p&gt;
&lt;h1 id=&#34;5-class-介绍&#34;&gt;5. class 介绍&lt;/h1&gt;
&lt;p&gt;参考：https://blog.csdn.net/hustyangju/article/details/21018103&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://strivefar.github.io/img/Linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/class.png&#34; alt=&#34;class&#34;&gt;&lt;/p&gt;
&lt;p&gt;一个类是一个设备的高级视图, 它抽象出低级的实现细节. 驱动可以见到一个SCSI 磁盘或者一个 ATA 磁盘, 在类的级别, 它们都是磁盘. 类允许用户空间基于它们做什么来使用设备, 而不是它们如何被连接或者它们如何工作.&lt;/p&gt;
&lt;p&gt;几乎所有的类都在 sysfs 中在 /sys/class 下出现. 因此, 例如, 所有的网络接口可在 /sys/class/net 下发现, 不管接口类型. 输入设备可在 /sys/class/input 下, 以及串行设备在 /sys/class/tty. 一个例外是块设备, 由于历史的原因在 /sys/block.&lt;/p&gt;
&lt;p&gt;cdev_add()执行后将会在/proc/devices文件中看到字符设备，但是在/dev/目录下没有生成相应的设备文件。直到class_device_create()执行后才会在/dev/目录下生成设备文件。而class_create()执行后会在/sys/class/目录下生成目录。&lt;/p&gt;
&lt;h2 id=&#34;创建一个class&#34;&gt;创建一个class&lt;/h2&gt;
&lt;p&gt;include/linux/device.h&lt;/p&gt;
&lt;h3 id=&#34;class_create宏&#34;&gt;class_create宏&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#define class_create(owner, name)		\
({										\
	static struct lock_class_key __key;	\
	__class_create(owner, name, &amp;amp;__key);\
})
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;owner：一般设置为THIS_MODULE&lt;/li&gt;
&lt;li&gt;name：kobject对象的名字&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct class *__class_create(struct module *owner, const char *name,
			     struct lock_class_key *key)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;struct class里面&amp;quot;继承&amp;quot;了kobject对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;在class下添加kobject对象&#34;&gt;在class下添加kobject对象&lt;/h2&gt;
&lt;p&gt;include/linux/device.h&lt;/p&gt;
&lt;h3 id=&#34;device_create函数&#34;&gt;device_create()函数&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;struct device *device_create(struct class *class, struct device *parent,
			     dev_t devt, void *drvdata, const char *fmt, ...)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;class：新构建的class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parent：新kobject对象的上一层节点，一般为NULL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;dev_t：属性文件记录该设备号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;drvdata：私有数据，一般为NULL&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;fmt：变参参数，一般用来设置kobject对象的名字&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;6-字符设备驱动入口函数初始化流程&#34;&gt;6. 字符设备驱动入口函数初始化流程&lt;/h1&gt;
&lt;p&gt;有了以上基础，下面用几个例子来说明一下关于字符设备的入口函数中函数的调用流程&lt;/p&gt;
&lt;p&gt;如果想方便省事，不在乎这点资源的浪费可以这样设计&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int __init led_init(void)
{
	int err;
	
	printk(&amp;quot;%s %s line %d\n&amp;quot;, __FILE__, __FUNCTION__, __LINE__);
	major = register_chrdev(0, &amp;quot;100ask_led&amp;quot;, &amp;amp;led_drv);  /* /dev/led */


	led_class = class_create(THIS_MODULE, &amp;quot;100ask_led_class&amp;quot;);
    /* 这里之所以没有调用device_create()函数，是因为此框架下将具体单板的资源设备下层，通用的驱动设为上层，实现了驱动的上下分离 */
	err = PTR_ERR(led_class);
	if (IS_ERR(led_class)) {
		printk(&amp;quot;%s %s line %d\n&amp;quot;, __FILE__, __FUNCTION__, __LINE__);
		unregister_chrdev(major, &amp;quot;100ask_led&amp;quot;);
		return -1;
	}
	
	return 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;动态分配主设备号alloc_chrdev_region() + cdev_init() + cdev_add()&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;/* 入口函数 */
static int adxl34x_drv_init(void)  
{  
  	int ret;
	dev_t adxl34x_devid;
	
	//printk(KERN_INFO&amp;quot;%s OK.\n&amp;quot;,__func__);
	if(alloc_chrdev_region(&amp;amp;adxl34x_devid, 0, 1, &amp;quot;adxl345&amp;quot;) &amp;lt; 0)
    {
        printk(KERN_ERR&amp;quot;Unable to alloc_chrdev_region.\n&amp;quot;);
        return -EINVAL;
    } 
    adxl34x_major = MAJOR(adxl34x_devid);
	cdev_init(&amp;amp;adxl34x_cdev, &amp;amp;adxl34x_fops);        
    ret = cdev_add(&amp;amp;adxl34x_cdev, adxl34x_devid, 1);
    if (ret &amp;lt; 0)
    {
        printk(KERN_ERR &amp;quot;Unable to cdev_add.\n&amp;quot;);
        goto error;
    }
        
    adxl34x_class = class_create(THIS_MODULE, &amp;quot;adxl345&amp;quot;); 
    device_create(adxl34x_class, NULL, MKDEV(adxl34x_major, 0), NULL, &amp;quot;adxl345&amp;quot;); 

	return 0;
error:
    unregister_chrdev_region(MKDEV(adxl34x_major, 0), 1);
    return -EINVAL;
	
}  


/* 修饰入口函数 */
module_init(adxl34x_drv_init);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;自定义静态分配主设备号示例：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int __init raw_init(void)
{
	dev_t dev = MKDEV(RAW_MAJOR, 0);
	int ret;

	if (max_raw_minors &amp;lt; 1 || max_raw_minors &amp;gt; 65536) {
		printk(KERN_WARNING &amp;quot;raw: invalid max_raw_minors (must be&amp;quot;
			&amp;quot; between 1 and 65536), using %d\n&amp;quot;, MAX_RAW_MINORS);
		max_raw_minors = MAX_RAW_MINORS;
	}

	raw_devices = vzalloc(sizeof(struct raw_device_data) * max_raw_minors);
	if (!raw_devices) {
		printk(KERN_ERR &amp;quot;Not enough memory for raw device structures\n&amp;quot;);
		ret = -ENOMEM;
		goto error;
	}

	ret = register_chrdev_region(dev, max_raw_minors, &amp;quot;raw&amp;quot;);
	if (ret)
		goto error;

	cdev_init(&amp;amp;raw_cdev, &amp;amp;raw_fops);
	ret = cdev_add(&amp;amp;raw_cdev, dev, max_raw_minors);
	if (ret)
		goto error_region;
	raw_class = class_create(THIS_MODULE, &amp;quot;raw&amp;quot;);
	if (IS_ERR(raw_class)) {
		printk(KERN_ERR &amp;quot;Error creating raw class.\n&amp;quot;);
		cdev_del(&amp;amp;raw_cdev);
		ret = PTR_ERR(raw_class);
		goto error_region;
	}
	raw_class-&amp;gt;devnode = raw_devnode;
	device_create(raw_class, NULL, MKDEV(RAW_MAJOR, 0), NULL, &amp;quot;rawctl&amp;quot;);

	return 0;

error_region:
	unregister_chrdev_region(dev, max_raw_minors);
error:
	vfree(raw_devices);
	return ret;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还可以结合一下，做一个判断：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;if (major) {
		devid = MKDEV(major, 0);
		rc = register_chrdev_region(devid, PC8736X_GPIO_CT, DEVNAME);
	} else {
		rc = alloc_chrdev_region(&amp;amp;devid, 0, PC8736X_GPIO_CT, DEVNAME);
		major = MAJOR(devid);
	}

···
    
	cdev_init(&amp;amp;pc8736x_gpio_cdev, &amp;amp;pc8736x_gpio_fileops);
	cdev_add(&amp;amp;pc8736x_gpio_cdev, devid, PC8736X_GPIO_CT);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;于是，在入口函数中，我们将自定义的file_operations结构体的地址传给cdev_init()函数，函数内部将其与cdev结构体的ops绑定&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;void cdev_init(struct cdev *cdev, const struct file_operations *fops)
{
	memset(cdev, 0, sizeof *cdev);
	INIT_LIST_HEAD(&amp;amp;cdev-&amp;gt;list);
	kobject_init(&amp;amp;cdev-&amp;gt;kobj, &amp;amp;ktype_cdev_default);
    /* 指向传入的file_operations结构体 */
	cdev-&amp;gt;ops = fops;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;那么，用户空间调用open函数是如何查找file_operation的接口的呢？&lt;/p&gt;
&lt;h1 id=&#34;7-open函数如何查找file_operation的接口&#34;&gt;7. open函数如何查找file_operation的接口&lt;/h1&gt;
&lt;p&gt;简单来讲，用户空间调用open函数，最终会导致内VFS调用chardev_open()函数，之后，struct file对象的f_op指向cdev的ops，
之后应用层调用read write等函数时便可以通过struct file的ops对象直接找到对应的驱动读写函数，对应最后一个框图中的“ 绿色通道 ”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://strivefar.github.io/img/Linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/opensys.png&#34; alt=&#34;opensys&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;get_unused_fd_flags&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为本次操作分配一个未使用过的文件描述符&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;do_file_opendd&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;生成一个空白struct file结构体&lt;/li&gt;
&lt;li&gt;从文件系统中查找到文件对应的inode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;do_dentry_open&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int do_dentry_open(struct file *f,
			  struct inode *inode,
			  int (*open)(struct inode *, struct file *))
{
	...
	/*把inode的i_fop赋值给struct file的f_op*/
	f-&amp;gt;f_op = fops_get(inode-&amp;gt;i_fop);
	...
	if (!open)
		open = f-&amp;gt;f_op-&amp;gt;open;
	if (open) {
		error = open(inode, f);
		if (error)
			goto cleanup_all;
	}
	...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;def_chr_fops-&amp;gt;chrdev_open&lt;/p&gt;
&lt;p&gt;​	ebf-buster-linux/fs/char_dev.c&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static int chrdev_open(struct inode *inode, struct file *filp)
{
	const struct file_operations *fops;
	struct cdev *p;
	struct cdev *new = NULL;
	...
	struct kobject *kobj;
	int idx;
	/*从内核哈希表cdev_map中，根据设备号查找自己注册的sturct cdev，获取cdev中的file_operation接口*/
	kobj = kobj_lookup(cdev_map, inode&amp;gt;i_rdev,&amp;amp;idx);
	new = container_of(kobj, struct cdev, kobj);
	...
	inode-&amp;gt;i_cdev = p = new;
	...
	fops = fops_get(p-&amp;gt;ops);
	...
	/*把cdev中的file_operation接口赋值给struct file的f_op*/
	replace_fops(filp, fops);
	
	/*调用自己实现的file_operation接口中的open函数*/
	if (filp-&amp;gt;f_op-&amp;gt;open) {
		ret = filp-&amp;gt;f_op-&amp;gt;open(inode, filp);
		if (ret)
			goto out_cdev_put;
	}
	...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://strivefar.github.io/img/Linux%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E5%85%A5%E5%8F%A3%E5%87%BD%E6%95%B0%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/cdev.png&#34; alt=&#34;cdev&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;参考来源&#34;&gt;参考来源&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.itpub.net/28291944/viewspace-2143703/&#34;&gt;http://blog.itpub.net/28291944/viewspace-2143703/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/zqixiao_09/article/details/50839042&#34;&gt;https://blog.csdn.net/zqixiao_09/article/details/50839042&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/hustyangju/article/details/21018103&#34;&gt;https://blog.csdn.net/hustyangju/article/details/21018103&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;野火嵌入式Linux视频&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>

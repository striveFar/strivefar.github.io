[{"authors":["youngfar"],"categories":null,"content":"","date":1554595200,"expirydate":-62135596800,"kind":"taxonomy","lang":"zh","lastmod":1554595200,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"https://strivefar.github.io/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"authors","summary":"","tags":null,"title":"YoungFar","type":"authors"},{"authors":null,"categories":null,"content":"Flexibility This feature can be used for publishing content such as:\n Online courses Project or software documentation Tutorials  The courses folder may be renamed. For example, we can rename it to docs for software/project documentation or tutorials for creating an online course.\nDelete tutorials To remove these pages, delete the courses folder and see below to delete the associated menu link.\nUpdate site menu After renaming or deleting the courses folder, you may wish to update any [[main]] menu links to it by editing your menu configuration at config/_default/menus.toml.\nFor example, if you delete this folder, you can remove the following from your menu configuration:\n[[main]] name = \u0026quot;Courses\u0026quot; url = \u0026quot;courses/\u0026quot; weight = 50  Or, if you are creating a software documentation site, you can rename the courses folder to docs and update the associated Courses menu configuration to:\n[[main]] name = \u0026quot;Docs\u0026quot; url = \u0026quot;docs/\u0026quot; weight = 50  Update the docs menu If you use the docs layout, note that the name of the menu in the front matter should be in the form [menu.X] where X is the folder name. Hence, if you rename the courses/example/ folder, you should also rename the menu definitions in the front matter of files within courses/example/ from [menu.example] to [menu.\u0026lt;NewFolderName\u0026gt;].\n","date":1536451200,"expirydate":-62135596800,"kind":"section","lang":"zh","lastmod":1536451200,"objectID":"59c3ce8e202293146a8a934d37a4070b","permalink":"https://strivefar.github.io/courses/example/","publishdate":"2018-09-09T00:00:00Z","relpermalink":"/courses/example/","section":"courses","summary":"正在努力学习中...","tags":null,"title":"Overview","type":"docs"},{"authors":null,"categories":null,"content":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1557010800,"objectID":"74533bae41439377bd30f645c4677a27","permalink":"https://strivefar.github.io/courses/example/example1/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example1/","section":"courses","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim.","tags":null,"title":"Example Page 1","type":"docs"},{"authors":null,"categories":null,"content":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\nTip 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1557010800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1557010800,"objectID":"1c2b5a11257c768c90d5050637d77d6a","permalink":"https://strivefar.github.io/courses/example/example2/","publishdate":"2019-05-05T00:00:00+01:00","relpermalink":"/courses/example/example2/","section":"courses","summary":"Here are some more tips for getting started with Academic:\nTip 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus.","tags":null,"title":"Example Page 2","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1906549200,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"https://strivefar.github.io/talk/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":["youngfar"],"categories":["嵌入式linux学习笔记"],"content":"绘制思维导图如下： ","date":1593878657,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1593878657,"objectID":"6e413c37a8c5286085da52312ab08d06","permalink":"https://strivefar.github.io/project/post/%E6%80%BB%E7%BA%BF%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B/","publishdate":"2020-07-05T00:04:17+08:00","relpermalink":"/project/post/%E6%80%BB%E7%BA%BF%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8%E6%A8%A1%E5%9E%8B/","section":"project","summary":"绘制思维导图如下：","tags":["linux"],"title":"总线设备驱动模型","type":"project"},{"authors":["youngfar"],"categories":["C语言学习"],"content":" 前言 参数的调用方式  11.1. 传值调用 11.2. 传址调用 11.3. 传引用调用 11.4. 示例说明   使用二级指针/一级指针创建链表时的对比  12.1. 主函数中作此调用 12.2. 使用二级指针创建链表 12.3. 使用一级指针创建链表会成功吗   销毁链表时二级指针和一级指针的对比  13.1. 使用二级指针销毁链表 13.2. 使用一级指针销毁链表会成功吗   总结 完整代码 参考来源  前言 我们在学习数据结构时，在链表初始化或者销毁链表的时候，经常使用二级指针或者一级指针的引用，这是为什么呢？同样是指向内存单元的地址，为什么就不能使用一级指针呢？使用一级指针去初始化或者是销毁链表的时候，究竟会发生什么呢？到底什么时候该用二级指针，什么时候该用一级指针？\n如果你对这些问题有疑问，可以参考本篇文章，以下是我个人对这些问题的理解，如有问题，欢迎随时联系我。\n参数的调用方式 我们通常使用的函数调用方式无非两种，一种是传值调用，一种是传址调用。 谈起指针我们可能瞬间就会把它和传址调用联系在一起，但实际上，对于指针来讲，它也存在着这两种调用方式，传值调用和传值调用。\n11.1. 传值调用 传值调用是指在调用参数时,不是对原参数进行操作,而是创建参数的拷贝并对其进行操作,这种调用有利于保护数据。\n11.2. 传址调用 传址调用的过程中把函数外部创建的变量的内存地址传递给函数参数，这种调用可以让函数和函数外边的变量建立起联系，函数内部可以直接操作函数外部；\n11.3. 传引用调用 适用于C++，不适用于C语言\n11.4. 示例说明 注意： 传递一级指针变量本身等价于在传递指针变量的值，虽然有指针参与其中，但在函数内部，也只是创建了指针的copy，无非就是把传过来的实参的值给指针的copy用一用，并没有对实参（原指针变量）进行操作\n#include \u0026lt;iostream\u0026gt; #include \u0026lt;string.h\u0026gt; using namespace std; void fun1(char* str) { str = new char[5]; strcpy (str, \u0026quot;test string\u0026quot;); } void fun2(char** str) { *str = new char[5]; strcpy (*str, \u0026quot;test string\u0026quot;); } int main() { char* s = NULL; cout \u0026lt;\u0026lt; \u0026quot;call function fun1\u0026quot; \u0026lt;\u0026lt; endl; fun1 (s); if (!s) cout \u0026lt;\u0026lt; \u0026quot;s is null!\u0026quot; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; s \u0026lt;\u0026lt; endl; cout \u0026lt;\u0026lt; \u0026quot;call function fun2\u0026quot; \u0026lt;\u0026lt; endl; fun2 (\u0026amp;s); if (!s) cout \u0026lt;\u0026lt; \u0026quot;s is null!\u0026quot; \u0026lt;\u0026lt; endl; else cout \u0026lt;\u0026lt; s \u0026lt;\u0026lt; endl; return 0; } ———————————————— 版权声明：本文为CSDN博主「踏莎行hyx」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.csdn.net/u012234115/article/details/39717215  输出结果： 使用二级指针/一级指针创建链表时的对比 12.1. 主函数中作此调用 int main() { LinkList L; ElemType e; Status i; int j, k; //InitList1(L); //一级指针方式创建表头，失败 InitList2(\u0026amp;L); //二级指针方式创建表头，成功 }  12.2. 使用二级指针创建链表 //初始化表头，用二级指针 Status InitList2(LinkList *L) //等价于Node **L { *L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */ if (!(*L)) /* 存储分配失败 */ return ERROR; (*L)-\u0026gt;next = NULL; /* 指针域为空 */ return OK; }  用图片说明更为直观： 函数内部可以直接操作函数外部\n简明描述为： 如果没有头结点： ![在这里插入图片描述]12.3. 使用一级指针创建链表会成功吗 //初始化表头，用一级指针（此方式无效） Status InitList1(LinkList L) //等价于Node *L { L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */ if (!L) /* 存储分配失败 */ return ERROR; L-\u0026gt;next = NULL; /* 指针域为空 */ return OK; }  用图片说明更为直观： ![在这里插入图片描述]很明显，把传过来的实参的值给指针的copy用一用，并没有对实参（原指针变量）进行操作，这样创建的链表是毫无意义的，main.c后面再使用L时，用的依旧是个垃圾值，是有隐患的。\n销毁链表时二级指针和一级指针的对比 main.c中：\nprintf(\u0026quot;销毁链表\\n\u0026quot;); //DestroyList1(L); //一级指针方式销毁链表，失败,且出现满屏乱码 DestroyList2(\u0026amp;L); //二级指针方式销毁链表，成功  13.1. 使用二级指针销毁链表 //销毁链表，使用二级指针 Status DestroyList2(LinkList *L) { LinkList p, q; p = (*L)-\u0026gt;next; /* p指向第一个结点 */ while (p) /* 没到表尾 */ { q = p-\u0026gt;next; free(p); p = q; } free(*L); //头结点彻底没有掉才是销毁 *L = NULL; return OK; }  用图片说明更为直观：\n![在这里插入图片描述]简单来说： 销毁链表就是让头指针为空，然后这个链表就彻底湮没在内存中了\n![在这里插入图片描述]13.2. 使用一级指针销毁链表会成功吗 //销毁链表，使用一级指针(此方式无效) Status DestroyList1(LinkList L) { LinkList p, q; p = L-\u0026gt;next; /* p指向第一个结点 */ while (p) /* 没到表尾 */ { q = p-\u0026gt;next; free(p); p = q; } free(L); L = NULL; return OK; }  用图片说明更为直观：\n![在这里插入图片描述]可见这种方式的确很危险，实际测试中也的确出现了乱码\n总结 1.初始化链表头部指针需要用二级指针或者一级指针的引用。\n2.销毁链表需要用到二级指针或者一级指针的引用。\n3.插入、删除、遍历、清空结点用一级指针即可。\n完整代码 #include \u0026quot;stdio.h\u0026quot; #include \u0026quot;stdlib.h\u0026quot; #include \u0026quot;time.h\u0026quot; #define OK 1 #define ERROR 0 #define TRUE 1 #define FALSE 0 #define MAXSIZE 20 /* 存储空间初始分配量 */ typedef int Status; /* Status是函数的类型,其值是函数结果状态代码，如OK等 */ typedef int ElemType; /* ElemType类型根据实际情况而定，这里假设为int */ Status visit(ElemType c) { printf(\u0026quot;%d \u0026quot;, c); return OK; } typedef struct Node { ElemType data; struct Node *next; } Node; typedef struct Node *LinkList; /* 定义LinkList */ //初始化表头，用一级指针（此方式无效） Status InitList1(LinkList L) //等价于Node *L { L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */ if (!L) /* 存储分配失败 */ return ERROR; L-\u0026gt;next = NULL; /* 指针域为空 */ return OK; } //初始化表头，用二级指针 Status InitList2(LinkList *L) //等价于Node **L { *L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */ if (!(*L)) /* 存储分配失败 */ return ERROR; (*L)-\u0026gt;next = NULL; /* 指针域为空 */ return OK; } //初始化表头，用一级指针引用 Status InitList3(LinkList \u0026amp;L) //等价于Node *\u0026amp;L { L = (LinkList)malloc(sizeof(Node)); /* 产生头结点,并使L指向此头结点 */ if (!L) /* 存储分配失败 */ return ERROR; L-\u0026gt;next = NULL; /* 指针域为空 */ return OK; } //清空链表，使用二级指针 Status ClearList1(LinkList *L) { LinkList p, q; p = (*L)-\u0026gt;next; /* p指向第一个结点 */ while (p) /* 没到表尾 */ { q = p-\u0026gt;next; free(p); p = q; } (*L)-\u0026gt;next = NULL; /* 头结点指针域为空 */ return OK; } //清空链表，使用一级指针 Status ClearList2(LinkList L) { LinkList p, q; p = L-\u0026gt;next; /* p指向(这里的第一个结点只头结点) */ while (p) /* 没到表尾 */ { q = p-\u0026gt;next; free(p); p = q; } L-\u0026gt;next = NULL; /* 头结点指针域为空 */ return OK; } //销毁链表，使用一级指针(此方式无效) Status DestroyList1(LinkList L) { LinkList p, q; p = L-\u0026gt;next; /* p指向第一个结点 */ while (p) /* 没到表尾 */ { q = p-\u0026gt;next; free(p); p = q; } free(L); L = NULL; return OK; } //销毁链表，使用二级指针 Status DestroyList2(LinkList *L) { LinkList p, q; p = (*L)-\u0026gt;next; /* p指向头结点(第一个结点) */ while (p) /* 没到表尾 */ { q = p-\u0026gt;next; free(p); p = q; } free(*L); //头结点彻底没有掉才是销毁 *L = NULL; return OK; } //销毁链表，使用一级指针引用 Status DestroyList3(LinkList \u0026amp;L) { LinkList p, q; p = L-\u0026gt;next; /* p指向第一个结点 */ while (p) /* 没到表尾 */ { q = p-\u0026gt;next; free(p); p = q; } free(L); L = NULL; return OK; } /* 初始条件：顺序线性表L已存在，1≤i≤ListLength(L) */ /* 操作结果：用e返回L中第i个数据元素的值 */ Status GetElem(LinkList L, int i, ElemType *e) { int j; LinkList p; /* 声明一结点p */ p = L-\u0026gt;next; /* 让p指向链表L的第一个结点 */ j = 1; /* j为计数器 */ while (p \u0026amp;\u0026amp; j \u0026lt; i) /* p不为空或者计数器j还没有等于i时，循环继续 */ { p = p-\u0026gt;next; /* 让p指向下一个结点 */ ++j; } if (!p || j \u0026gt; i) return ERROR; /* 第i个元素不存在 */ *e = p-\u0026gt;data; /* 取第i个元素的数据 */ return OK; } //在中间插入元素，用二级指针 Status ListInsert1(LinkList *L, int i, ElemType e) { int j; LinkList p, s; p = *L; j = 1; while (p \u0026amp;\u0026amp; j \u0026lt; i) /* 寻找第i个结点 */ { p = p-\u0026gt;next; ++j; } if (!p || j \u0026gt; i) return ERROR; /* 第i个元素不存在 */ s = (LinkList)malloc(sizeof(Node)); /* 生成新结点(C语言标准函数) */ s-\u0026gt;data = e; s-\u0026gt;next = p-\u0026gt;next; /* 将p的后继结点赋值给s的后继 */ p-\u0026gt;next = s; /* 将s赋值给p的后继 */ return OK; } //在中间插入元素，用一级指针 Status ListInsert2(LinkList L, int i, ElemType e) { int j; LinkList p, s; p = L; j = 1; while (p \u0026amp;\u0026amp; j \u0026lt; i) /* 寻找第i个结点 */ { p = p-\u0026gt;next; ++j; } if (!p || j \u0026gt; i) return ERROR; /* 第i个元素不存在 */ s = (LinkList)malloc(sizeof(Node)); /* 生成新结点(C语言标准函数) */ s-\u0026gt;data = e; s-\u0026gt;next = p-\u0026gt;next; /* 将p的后继结点赋值给s的后继 */ p-\u0026gt;next = s; /* 将s赋值给p的后继 */ return OK; } //删除一个元素，用二级指针 Status ListDelete1(LinkList *L, int i, ElemType *e) { int j; LinkList p, q; p = *L; j = 1; while (p-\u0026gt;next \u0026amp;\u0026amp; j \u0026lt; i) /* 遍历寻找第i个元素 */ { p = p-\u0026gt;next; ++j; } if (!(p-\u0026gt;next) || j \u0026gt; i) return ERROR; /* 第i个元素不存在 */ q = p-\u0026gt;next; p-\u0026gt;next = q-\u0026gt;next; /* 将q的后继赋值给p的后继 */ *e = q-\u0026gt;data; /* 将q结点中的数据给e */ free(q); /* 让系统回收此结点，释放内存 */ return OK; } //删除一个元素，用一级指针 Status ListDelete2(LinkList L, int i, ElemType *e) { int j; LinkList p, q; p = L; j = 1; while (p-\u0026gt;next \u0026amp;\u0026amp; j \u0026lt; i) /* 遍历寻找第i个元素 */ { p = p-\u0026gt;next; ++j; } if (!(p-\u0026gt;next) || j \u0026gt; i) return ERROR; /* 第i个元素不存在 */ q = p-\u0026gt;next; p-\u0026gt;next = q-\u0026gt;next; /* 将q的后继赋值给p的后继 */ *e = q-\u0026gt;data; /* 将q结点中的数据给e */ free(q); /* 让系统回收此结点，释放内存 */ return OK; } /* 初始条件：顺序线性表L已存在 */ /* 操作结果：依次对L的每个数据元素输出 */ Status ListTraverse(LinkList L) { LinkList p = L-\u0026gt;next; while (p) { visit(p-\u0026gt;data); p = p-\u0026gt;next; } printf(\u0026quot;\\n\u0026quot;); return OK; } int main() { LinkList L; ElemType e; Status i; int j, k; //InitList1(L); //一级指针方式创建表头，失败 //InitList2(\u0026amp;L); //二级指针方式创建表头，成功 InitList3(L); //一级指针引用方式创建表头，成功 for (j = 1; j \u0026lt;= 7; j++) ListInsert2(L, 1, j); printf(\u0026quot;一级指针方式在L的表头依次插入1～7后：\u0026quot;); ListTraverse(L); ListInsert1(\u0026amp;L, 3, 12); printf(\u0026quot;二级指针方式在L的中间插入12后：\u0026quot;); ListTraverse(L); ListInsert2(L, 5, 27); printf(\u0026quot;一级指针在L的中间插入27后：\u0026quot;); ListTraverse(L); GetElem(L, 5, \u0026amp;e); printf(\u0026quot;第5个元素的值为：%d\\n\u0026quot;, e); ListDelete1(\u0026amp;L, 5, \u0026amp;e); /* 删除第5个数据 */ printf(\u0026quot;二级指针方式删除第%d个的元素值为：%d\\n\u0026quot;, 5, e); printf(\u0026quot;依次输出L的元素：\u0026quot;); ListTraverse(L); ListDelete2(L, 3, \u0026amp;e); /* 删除第3个数据 */ printf(\u0026quot;一级指针方式删除第%d个的元素值为：%d\\n\u0026quot;, 3, e); printf(\u0026quot;依次输出L的元素：\u0026quot;); ListTraverse(L); printf(\u0026quot;二级指针方式清空链表\\n\u0026quot;); ClearList1(\u0026amp;L); printf(\u0026quot;依次输出L的元素：\u0026quot;); ListTraverse(L); for (j = 1; j \u0026lt;= 7; j++) ListInsert2(L, j, j); printf(\u0026quot;在L的表尾依次插入1～7后：\u0026quot;); ListTraverse(L); printf(\u0026quot;一级指针方式清空链表\\n\u0026quot;); ClearList2(L); printf(\u0026quot;依次输出L的元素：\u0026quot;); ListTraverse(L); printf(\u0026quot;销毁链表\\n\u0026quot;); //DestroyList1(L); //一级指针方式销毁链表，失败,且出现满屏乱码 DestroyList2(\u0026amp;L); //二级指针方式销毁链表，成功 DestroyList3(L); //一级指针引用方式销毁链表，成功 return 0; }  参考来源 本文参考了以下博文，结合自己的理解，总结记录了相关知识，特此感谢 https://blog.csdn.net/u012234115/article/details/39717215 https://blog.csdn.net/DX_Jone/article/details/102817995\n","date":1591352808,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1591352808,"objectID":"023659301634c78eb2c3f28ed9be9e54","permalink":"https://strivefar.github.io/project/post/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E9%93%BE%E8%A1%A8%E4%B8%AD%E4%B8%BA%E4%BD%95%E4%BD%BF%E7%94%A8%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E6%88%96%E8%80%85%E4%B8%80%E7%BA%A7%E6%8C%87%E9%92%88%E7%9A%84%E5%BC%95%E7%94%A8/","publishdate":"2020-06-05T18:26:48+08:00","relpermalink":"/project/post/%E5%BD%BB%E5%BA%95%E7%90%86%E8%A7%A3%E9%93%BE%E8%A1%A8%E4%B8%AD%E4%B8%BA%E4%BD%95%E4%BD%BF%E7%94%A8%E4%BA%8C%E7%BA%A7%E6%8C%87%E9%92%88%E6%88%96%E8%80%85%E4%B8%80%E7%BA%A7%E6%8C%87%E9%92%88%E7%9A%84%E5%BC%95%E7%94%A8/","section":"project","summary":"前言 参数的调用方式 11.1. 传值调用 11.2. 传址调用 11.3. 传引用调用 11.4. 示例说明 使用二级指针/一级指针创建链表时的对比 12.1. 主函数中作此调用 12.2. 使用二级指针创建链表 12.3.","tags":["数据结构与算法"],"title":"链表中为何使用二级指针或者一级指针的引用","type":"project"},{"authors":["youngfar"],"categories":["嵌入式linux学习笔记"],"content":"参考链接 GCC生成动态链接库（.so文件）：-shared和-fPIC选项 GCC创建和使用静态链接库（.a文件） gcc的使用方法；动态编译和静态编译；Linux制作动态库和静态库\n命名规则 静态库命名规则如下： libxxx.o lib:前缀 .o:静态库 动态链接库（shared object file，共享对象文件）命名规则如下： libxxx.so lib:前缀 .so:动态库\n静态库参数 gcc 常用编译选项 动态库和静态库的对比 我们先来说一下静态库； Linux下的静态库是以.a结尾的二进制文件，它作为一个程序的模块，它在链接期间就被组合到了程序中，比如说我有一个主程序mian.c，那么我把它和静态库链接的时候，它就直接把这个静态库组合到了我的main.c里面生成的一个二进制文件.a。 而与静态链接库相对的是动态链接库，同样的是把主函数mian.c和动态库进行链接，与静态库不同的是,这个动态库在程序运行的阶段才会被加载进内存,参与主函数运行 下面用几张图来说明一下： 还可以加上-static选项，让链接静态库后的math.out彻底的独立起来，“完全静态”，因此，得到的二进制文件会非常大。 使用静态/动态链接库的优缺点： 静态库： 编译后的执行程序不需要外部的函数库支持，因为所有使用的函数都经被编译进去了。当然这也会成为他的缺点，因为如果静态函数库改变了，那么你的程序必须重新编译。\n静态库的代码在编译时链接到应用程序中，因此编译时库文件必须存在并且需要通过“-L”参数传递给编译器，应用程序在开始执行时，库函数代码将随程序一 起调入进程内存段直到进程结束，其执行过程不需要原静态库存在。\n动态库： 动态函数库在编译的时候并没有被编译进目标代码中，你的程序执行到相关函数时才调用该函数库里的相应函数，因此动态函数库所产生的可执行文件比较小。由于函数库没有被整合进你的程序，而是程序运行时动态的申请并调用，所以程序的运行环境中必须提供相应的库。动态函数库的改变并不影响你的程序，所以动态函数库的升级比较方便。\n不同的INIX系统链接动态库方法，实现细节不一样，编译PIC型.o中间文件的方法一般是采用C语言编译器的-KPIC或者 -fPIC选项 最主要的是GCC命令行的一个选项: -shared:该选项指定生成动态连接库(让连接器生成T类型的导出符号表，有时候也生成弱连接W类 型的导出符号) ,不用该标志外部程序无法连接。相当于一个可执行文件 -fPIC:表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的,所以动态载入时是通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码段共享的目的。\n制作链接库的目的（商业角度）： 这就和商业项目挂钩了: 假如我们是一个项目的外包方，我们是有专利的，希望别人使用我们已经实现的功能，但又不希望别人看到我们的源代码，所以这对商业机构是非常友好的。\nMakefile中的使用实例： ","date":1589328000,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1589328000,"objectID":"1871c95961991aff494bda9a3a308f67","permalink":"https://strivefar.github.io/project/post/getting-started/","publishdate":"2020-05-13T00:00:00Z","relpermalink":"/project/post/getting-started/","section":"project","summary":"参考链接 GCC生成动态链接库（.so文件）：-shared和-fPIC选项 GCC创建和使用静态链接库（.a文件） gcc的使用方法；动态编译和","tags":["linux","嵌入式"],"title":"动态编译和静态编译——制作动态库和静态库","type":"project"},{"authors":["YoungFar"],"categories":null,"content":" Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1554595200,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1554595200,"objectID":"557dc08fd4b672a0c08e0a8cf0c9ff7d","permalink":"https://strivefar.github.io/publication/preprint/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/preprint/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example preprint / working paper","type":"publication"},{"authors":[],"categories":[],"content":"Create slides in Markdown with Academic Academic | Documentation\n Features  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides   Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E   Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)   Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = ;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\n Fragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \n A fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears   Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view    Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links    night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links   Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}   Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }   Questions? Ask\nDocumentation\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://strivefar.github.io/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Academic's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["YoungFar","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1441065600,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1441065600,"objectID":"966884cc0d8ac9e31fab966c4534e973","permalink":"https://strivefar.github.io/publication/journal-article/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/journal-article/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example journal article","type":"publication"},{"authors":["YoungFar","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Click the Slides button above to demo Academic\u0026rsquo;s Markdown slides feature.   Supplementary notes can be added here, including code and math.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"zh","lastmod":1372636800,"objectID":"69425fb10d4db090cfbd46854715582c","permalink":"https://strivefar.github.io/publication/conference-paper/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/conference-paper/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":["Source Themes"],"title":"An example conference paper","type":"publication"}]